{
  "service": {
    "service": "IoT-SES-UsersRestApi",
    "serviceObject": {
      "name": "IoT-SES-UsersRestApi"
    },
    "provider": {
      "name": "aws",
      "region": "us-east-1",
      "runtime": "nodejs14.x",
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CraeteUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-UsersRestApi-dev-craeteUsers"
            }
          },
          "ReadUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-UsersRestApi-dev-readUsers"
            }
          },
          "UpdateUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-UsersRestApi-dev-updateUsers"
            }
          },
          "DeleteUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-UsersRestApi-dev-deleteUsers"
            }
          },
          "HeartBeatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-UsersRestApi-dev-heartBeats"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "IoT-SES-UsersRestApi",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/IoT-SES-UsersRestApi-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/IoT-SES-UsersRestApi-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "IoT-SES-UsersRestApi",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CraeteUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-UsersRestApi/dev/1688080114070-2023-06-29T23:08:34.070Z/IoT-SES-UsersRestApi.zip"
              },
              "Handler": "createUser.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-UsersRestApi-dev-craeteUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to create a new user!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CraeteUsersLogGroup"
            ]
          },
          "ReadUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-UsersRestApi/dev/1688080114070-2023-06-29T23:08:34.070Z/IoT-SES-UsersRestApi.zip"
              },
              "Handler": "readUser.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-UsersRestApi-dev-readUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to get all usera from database!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReadUsersLogGroup"
            ]
          },
          "UpdateUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-UsersRestApi/dev/1688080114070-2023-06-29T23:08:34.070Z/IoT-SES-UsersRestApi.zip"
              },
              "Handler": "updateUser.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-UsersRestApi-dev-updateUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda function to update an existing user in database.",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUsersLogGroup"
            ]
          },
          "DeleteUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-UsersRestApi/dev/1688080114070-2023-06-29T23:08:34.070Z/IoT-SES-UsersRestApi.zip"
              },
              "Handler": "deleteUser.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-UsersRestApi-dev-deleteUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda function to delete an existing user from the database.",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUsersLogGroup"
            ]
          },
          "HeartBeatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-UsersRestApi/dev/1688080114070-2023-06-29T23:08:34.070Z/IoT-SES-UsersRestApi.zip"
              },
              "Handler": "index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-UsersRestApi-dev-heartBeats",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to ensure that everything is ok!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HeartBeatsLogGroup"
            ]
          },
          "CraeteUsersLambdaVersionNsDWXkWcuv6hiIKjOUgTwKFMCsSqP7Y5DkYbOeBdVa8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CraeteUsersLambdaFunction"
              },
              "CodeSha256": "Bn1CrQjruzhoN3ibW2Y6zGxY6AUJawxbt+yPSOBzI/w=",
              "Description": "lambda to create a new user!"
            }
          },
          "ReadUsersLambdaVersioncZXn5X3n7p58KhItafy8wMGQqNWWKS6roKq4cGiDlLI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReadUsersLambdaFunction"
              },
              "CodeSha256": "Bn1CrQjruzhoN3ibW2Y6zGxY6AUJawxbt+yPSOBzI/w=",
              "Description": "lambda to get all usera from database!"
            }
          },
          "UpdateUsersLambdaVersion6YqM0EYxr4i73GgLw7aGcXCj0mKo5zoAkCTlnYEs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUsersLambdaFunction"
              },
              "CodeSha256": "Bn1CrQjruzhoN3ibW2Y6zGxY6AUJawxbt+yPSOBzI/w=",
              "Description": "lambda function to update an existing user in database."
            }
          },
          "DeleteUsersLambdaVersionZP37mYMK8OeCYl5JOHAjHzPvDetruGQe0lLdW2PxnO4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUsersLambdaFunction"
              },
              "CodeSha256": "Bn1CrQjruzhoN3ibW2Y6zGxY6AUJawxbt+yPSOBzI/w=",
              "Description": "lambda function to delete an existing user from the database."
            }
          },
          "HeartBeatsLambdaVersion1Snt03UNrtTkzmw58pmtIXUhgm4JJOZrVU8ivatNAc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HeartBeatsLambdaFunction"
              },
              "CodeSha256": "Bn1CrQjruzhoN3ibW2Y6zGxY6AUJawxbt+yPSOBzI/w=",
              "Description": "lambda to ensure that everything is ok!"
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-IoT-SES-UsersRestApi",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "CraeteUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CraeteUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCraeteUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CraeteUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiV0UsersCreate": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/v0/users/create",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCraeteUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCraeteUsers"
          },
          "ReadUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReadUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationReadUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ReadUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV0UsersRead": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v0/users/read",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationReadUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationReadUsers"
          },
          "UpdateUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutApiV0UsersUpdate": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /api/v0/users/update",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateUsers"
          },
          "DeleteUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteApiV0UsersDelete": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /api/v0/users/delete",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteUsers"
          },
          "HeartBeatsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HeartBeatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHeartBeats": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HeartBeatsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV0Users": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v0/users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHeartBeats"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHeartBeats"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-IoT-SES-UsersRestApi-dev-ServerlessDeploymentBucketName"
            }
          },
          "CraeteUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CraeteUsersLambdaVersionNsDWXkWcuv6hiIKjOUgTwKFMCsSqP7Y5DkYbOeBdVa8"
            },
            "Export": {
              "Name": "sls-IoT-SES-UsersRestApi-dev-CraeteUsersLambdaFunctionQualifiedArn"
            }
          },
          "ReadUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReadUsersLambdaVersioncZXn5X3n7p58KhItafy8wMGQqNWWKS6roKq4cGiDlLI"
            },
            "Export": {
              "Name": "sls-IoT-SES-UsersRestApi-dev-ReadUsersLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUsersLambdaVersion6YqM0EYxr4i73GgLw7aGcXCj0mKo5zoAkCTlnYEs"
            },
            "Export": {
              "Name": "sls-IoT-SES-UsersRestApi-dev-UpdateUsersLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUsersLambdaVersionZP37mYMK8OeCYl5JOHAjHzPvDetruGQe0lLdW2PxnO4"
            },
            "Export": {
              "Name": "sls-IoT-SES-UsersRestApi-dev-DeleteUsersLambdaFunctionQualifiedArn"
            }
          },
          "HeartBeatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HeartBeatsLambdaVersion1Snt03UNrtTkzmw58pmtIXUhgm4JJOZrVU8ivatNAc"
            },
            "Export": {
              "Name": "sls-IoT-SES-UsersRestApi-dev-HeartBeatsLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-IoT-SES-UsersRestApi-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-IoT-SES-UsersRestApi-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "craeteUsers": {
        "handler": "createUser.handler",
        "description": "lambda to create a new user!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/users/create",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/v0/users/create"
          }
        ],
        "name": "IoT-SES-UsersRestApi-dev-craeteUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CraeteUsersLambdaVersionNsDWXkWcuv6hiIKjOUgTwKFMCsSqP7Y5DkYbOeBdVa8"
      },
      "readUsers": {
        "handler": "readUser.handler",
        "description": "lambda to get all usera from database!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/users/read",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v0/users/read"
          }
        ],
        "name": "IoT-SES-UsersRestApi-dev-readUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ReadUsersLambdaVersioncZXn5X3n7p58KhItafy8wMGQqNWWKS6roKq4cGiDlLI"
      },
      "updateUsers": {
        "handler": "updateUser.handler",
        "description": "lambda function to update an existing user in database.",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/users/update",
              "method": "PUT"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/api/v0/users/update"
          }
        ],
        "name": "IoT-SES-UsersRestApi-dev-updateUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateUsersLambdaVersion6YqM0EYxr4i73GgLw7aGcXCj0mKo5zoAkCTlnYEs"
      },
      "deleteUsers": {
        "handler": "deleteUser.handler",
        "description": "lambda function to delete an existing user from the database.",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/users/delete",
              "method": "DELETE"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/api/v0/users/delete"
          }
        ],
        "name": "IoT-SES-UsersRestApi-dev-deleteUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteUsersLambdaVersionZP37mYMK8OeCYl5JOHAjHzPvDetruGQe0lLdW2PxnO4"
      },
      "heartBeats": {
        "handler": "index.handler",
        "description": "lambda to ensure that everything is ok!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/users",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v0/users"
          }
        ],
        "name": "IoT-SES-UsersRestApi-dev-heartBeats",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "HeartBeatsLambdaVersion1Snt03UNrtTkzmw58pmtIXUhgm4JJOZrVU8ivatNAc"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "IoT-SES-UsersRestApi",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "D:\\4th_year_materials\\myTeamWorks\\khalid\\IOT_expressjs_restAPI-main\\api\\functions\\users\\.serverless\\IoT-SES-UsersRestApi.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/IoT-SES-UsersRestApi/dev/1688080114070-2023-06-29T23:08:34.070Z",
    "artifact": "IoT-SES-UsersRestApi.zip"
  }
}