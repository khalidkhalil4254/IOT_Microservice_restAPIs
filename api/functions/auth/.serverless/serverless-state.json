{
  "service": {
    "service": "IoT-SES-AuthRestApi",
    "serviceObject": {
      "name": "IoT-SES-AuthRestApi"
    },
    "provider": {
      "name": "aws",
      "region": "us-east-1",
      "runtime": "nodejs14.x",
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CraeteAuthLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-craeteAuth"
            }
          },
          "CreateAuthMobileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-createAuthMobile"
            }
          },
          "ReadAuthLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-readAuth"
            }
          },
          "ReadAuthMobileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-readAuthMobile"
            }
          },
          "GetIdByUserAndPasswordLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-getIdByUserAndPassword"
            }
          },
          "GetIdByEmailLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-getIdByEmail"
            }
          },
          "UpdateAuthLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-updateAuth"
            }
          },
          "DeleteAuthLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-deleteAuth"
            }
          },
          "HeartBeatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-heartBeats"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "IoT-SES-AuthRestApi",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/IoT-SES-AuthRestApi-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/IoT-SES-AuthRestApi-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "IoT-SES-AuthRestApi",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CraeteAuthLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688506339771-2023-07-04T21:32:19.771Z/IoT-SES-AuthRestApi.zip"
              },
              "Handler": "createAuth.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-AuthRestApi-dev-craeteAuth",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to create a new Authentication!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CraeteAuthLogGroup"
            ]
          },
          "CreateAuthMobileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688506339771-2023-07-04T21:32:19.771Z/IoT-SES-AuthRestApi.zip"
              },
              "Handler": "createAuthMobile.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-AuthRestApi-dev-createAuthMobile",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to create a new Authentication using mobile application!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateAuthMobileLogGroup"
            ]
          },
          "ReadAuthLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688506339771-2023-07-04T21:32:19.771Z/IoT-SES-AuthRestApi.zip"
              },
              "Handler": "readAuth.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-AuthRestApi-dev-readAuth",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to get Authentication from database!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReadAuthLogGroup"
            ]
          },
          "ReadAuthMobileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688506339771-2023-07-04T21:32:19.771Z/IoT-SES-AuthRestApi.zip"
              },
              "Handler": "readAuthMobile.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-AuthRestApi-dev-readAuthMobile",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to get Authentication from database optimized for mobile application!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReadAuthMobileLogGroup"
            ]
          },
          "GetIdByUserAndPasswordLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688506339771-2023-07-04T21:32:19.771Z/IoT-SES-AuthRestApi.zip"
              },
              "Handler": "getIdByUserAndPss.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-AuthRestApi-dev-getIdByUserAndPassword",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to get Authentication ID by user & password from database optimized for mobile application!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetIdByUserAndPasswordLogGroup"
            ]
          },
          "GetIdByEmailLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688506339771-2023-07-04T21:32:19.771Z/IoT-SES-AuthRestApi.zip"
              },
              "Handler": "getIdByEmail.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-AuthRestApi-dev-getIdByEmail",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to get Authentication ID by EMAIL for generating QRCODE in mobile application!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetIdByEmailLogGroup"
            ]
          },
          "UpdateAuthLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688506339771-2023-07-04T21:32:19.771Z/IoT-SES-AuthRestApi.zip"
              },
              "Handler": "updateAuth.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-AuthRestApi-dev-updateAuth",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to update Authentication in database!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateAuthLogGroup"
            ]
          },
          "DeleteAuthLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688506339771-2023-07-04T21:32:19.771Z/IoT-SES-AuthRestApi.zip"
              },
              "Handler": "readAuth.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-AuthRestApi-dev-deleteAuth",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to delete Authentication from database!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteAuthLogGroup"
            ]
          },
          "HeartBeatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688506339771-2023-07-04T21:32:19.771Z/IoT-SES-AuthRestApi.zip"
              },
              "Handler": "index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-AuthRestApi-dev-heartBeats",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to ensure that everything is ok!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HeartBeatsLogGroup"
            ]
          },
          "CraeteAuthLambdaVersioniqM21i8Up4CpDjF7jC5K9RMXaoy9WEgM39dc7O0CT0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CraeteAuthLambdaFunction"
              },
              "CodeSha256": "S3pidE0Rrdj2gJ1+4QsCfGw8PG30kfkdkE3lDiI2oyo=",
              "Description": "lambda to create a new Authentication!"
            }
          },
          "CreateAuthMobileLambdaVersionulIweprwaIwIC5kUFTTzgG4Dgr8jOpZIPeA2rquIsI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateAuthMobileLambdaFunction"
              },
              "CodeSha256": "S3pidE0Rrdj2gJ1+4QsCfGw8PG30kfkdkE3lDiI2oyo=",
              "Description": "lambda to create a new Authentication using mobile application!"
            }
          },
          "ReadAuthLambdaVersionjTS4VILbwrYxS9ZHRyL4PuqBMcpQPTxjjJSpwJB0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReadAuthLambdaFunction"
              },
              "CodeSha256": "S3pidE0Rrdj2gJ1+4QsCfGw8PG30kfkdkE3lDiI2oyo=",
              "Description": "lambda to get Authentication from database!"
            }
          },
          "ReadAuthMobileLambdaVersionyX1wmqMBaYTMucwlTLuxDDxkG10va9lqRWxw5kvgM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReadAuthMobileLambdaFunction"
              },
              "CodeSha256": "S3pidE0Rrdj2gJ1+4QsCfGw8PG30kfkdkE3lDiI2oyo=",
              "Description": "lambda to get Authentication from database optimized for mobile application!"
            }
          },
          "GetIdByUserAndPasswordLambdaVersionK3OVNdVPzeZNXm2YuCf6PnPkFh2kCt6dNq6Dt8U4w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetIdByUserAndPasswordLambdaFunction"
              },
              "CodeSha256": "S3pidE0Rrdj2gJ1+4QsCfGw8PG30kfkdkE3lDiI2oyo=",
              "Description": "lambda to get Authentication ID by user & password from database optimized for mobile application!"
            }
          },
          "GetIdByEmailLambdaVersionagpy3L8voEqpITyTAD4ATfEo2FbxFZDi0cHAbUu1L60": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetIdByEmailLambdaFunction"
              },
              "CodeSha256": "S3pidE0Rrdj2gJ1+4QsCfGw8PG30kfkdkE3lDiI2oyo=",
              "Description": "lambda to get Authentication ID by EMAIL for generating QRCODE in mobile application!"
            }
          },
          "UpdateAuthLambdaVersionFpNBreDOAvl7uzE1DI7cR9fpa1OoZFsq506y0bwkXvI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateAuthLambdaFunction"
              },
              "CodeSha256": "S3pidE0Rrdj2gJ1+4QsCfGw8PG30kfkdkE3lDiI2oyo=",
              "Description": "lambda to update Authentication in database!"
            }
          },
          "DeleteAuthLambdaVersionML8DhJg0xwbYZ3u9SeK1Bw3UI2rqDHr3mFBwu3uuU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteAuthLambdaFunction"
              },
              "CodeSha256": "S3pidE0Rrdj2gJ1+4QsCfGw8PG30kfkdkE3lDiI2oyo=",
              "Description": "lambda to delete Authentication from database!"
            }
          },
          "HeartBeatsLambdaVersionCXhrpv7lmnpGsgkMkCNGeVQWOmi7qw98fe4DchRt2Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HeartBeatsLambdaFunction"
              },
              "CodeSha256": "S3pidE0Rrdj2gJ1+4QsCfGw8PG30kfkdkE3lDiI2oyo=",
              "Description": "lambda to ensure that everything is ok!"
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-IoT-SES-AuthRestApi",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "CraeteAuthLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CraeteAuthLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCraeteAuth": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CraeteAuthLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiV0AuthCreate": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/v0/auth/create",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCraeteAuth"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCraeteAuth"
          },
          "CreateAuthMobileLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateAuthMobileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateAuthMobile": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateAuthMobileLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiV1AuthCreate": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/v1/auth/create",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateAuthMobile"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateAuthMobile"
          },
          "ReadAuthLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReadAuthLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationReadAuth": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ReadAuthLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV0AuthRead": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v0/auth/read",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationReadAuth"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationReadAuth"
          },
          "ReadAuthMobileLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReadAuthMobileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationReadAuthMobile": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ReadAuthMobileLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV1AuthRead": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v1/auth/read",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationReadAuthMobile"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationReadAuthMobile"
          },
          "GetIdByUserAndPasswordLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetIdByUserAndPasswordLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetIdByUserAndPassword": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetIdByUserAndPasswordLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV1AuthGetidbyuserandpassword": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v1/auth/getIdByUserAndPassword",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetIdByUserAndPassword"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetIdByUserAndPassword"
          },
          "GetIdByEmailLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetIdByEmailLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetIdByEmail": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetIdByEmailLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV1AuthGetidbyemail": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v1/auth/getIdByEmail",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetIdByEmail"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetIdByEmail"
          },
          "UpdateAuthLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateAuthLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateAuth": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateAuthLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutApiV0AuthUpdate": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /api/v0/auth/update",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateAuth"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateAuth"
          },
          "DeleteAuthLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteAuthLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteAuth": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteAuthLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteApiV0AuthDelete": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /api/v0/auth/delete",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteAuth"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteAuth"
          },
          "HeartBeatsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HeartBeatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHeartBeats": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HeartBeatsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV0Auth": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v0/auth",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHeartBeats"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHeartBeats"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-IoT-SES-AuthRestApi-dev-ServerlessDeploymentBucketName"
            }
          },
          "CraeteAuthLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CraeteAuthLambdaVersioniqM21i8Up4CpDjF7jC5K9RMXaoy9WEgM39dc7O0CT0"
            },
            "Export": {
              "Name": "sls-IoT-SES-AuthRestApi-dev-CraeteAuthLambdaFunctionQualifiedArn"
            }
          },
          "CreateAuthMobileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateAuthMobileLambdaVersionulIweprwaIwIC5kUFTTzgG4Dgr8jOpZIPeA2rquIsI"
            },
            "Export": {
              "Name": "sls-IoT-SES-AuthRestApi-dev-CreateAuthMobileLambdaFunctionQualifiedArn"
            }
          },
          "ReadAuthLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReadAuthLambdaVersionjTS4VILbwrYxS9ZHRyL4PuqBMcpQPTxjjJSpwJB0"
            },
            "Export": {
              "Name": "sls-IoT-SES-AuthRestApi-dev-ReadAuthLambdaFunctionQualifiedArn"
            }
          },
          "ReadAuthMobileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReadAuthMobileLambdaVersionyX1wmqMBaYTMucwlTLuxDDxkG10va9lqRWxw5kvgM"
            },
            "Export": {
              "Name": "sls-IoT-SES-AuthRestApi-dev-ReadAuthMobileLambdaFunctionQualifiedArn"
            }
          },
          "GetIdByUserAndPasswordLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetIdByUserAndPasswordLambdaVersionK3OVNdVPzeZNXm2YuCf6PnPkFh2kCt6dNq6Dt8U4w"
            },
            "Export": {
              "Name": "sls-IoT-SES-AuthRestApi-dev-GetIdByUserAndPasswordLambdaFunctionQualifiedArn"
            }
          },
          "GetIdByEmailLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetIdByEmailLambdaVersionagpy3L8voEqpITyTAD4ATfEo2FbxFZDi0cHAbUu1L60"
            },
            "Export": {
              "Name": "sls-IoT-SES-AuthRestApi-dev-GetIdByEmailLambdaFunctionQualifiedArn"
            }
          },
          "UpdateAuthLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateAuthLambdaVersionFpNBreDOAvl7uzE1DI7cR9fpa1OoZFsq506y0bwkXvI"
            },
            "Export": {
              "Name": "sls-IoT-SES-AuthRestApi-dev-UpdateAuthLambdaFunctionQualifiedArn"
            }
          },
          "DeleteAuthLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteAuthLambdaVersionML8DhJg0xwbYZ3u9SeK1Bw3UI2rqDHr3mFBwu3uuU"
            },
            "Export": {
              "Name": "sls-IoT-SES-AuthRestApi-dev-DeleteAuthLambdaFunctionQualifiedArn"
            }
          },
          "HeartBeatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HeartBeatsLambdaVersionCXhrpv7lmnpGsgkMkCNGeVQWOmi7qw98fe4DchRt2Y"
            },
            "Export": {
              "Name": "sls-IoT-SES-AuthRestApi-dev-HeartBeatsLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-IoT-SES-AuthRestApi-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-IoT-SES-AuthRestApi-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "craeteAuth": {
        "handler": "createAuth.handler",
        "description": "lambda to create a new Authentication!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/auth/create",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/v0/auth/create"
          }
        ],
        "name": "IoT-SES-AuthRestApi-dev-craeteAuth",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CraeteAuthLambdaVersioniqM21i8Up4CpDjF7jC5K9RMXaoy9WEgM39dc7O0CT0"
      },
      "createAuthMobile": {
        "handler": "createAuthMobile.handler",
        "description": "lambda to create a new Authentication using mobile application!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v1/auth/create",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/v1/auth/create"
          }
        ],
        "name": "IoT-SES-AuthRestApi-dev-createAuthMobile",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateAuthMobileLambdaVersionulIweprwaIwIC5kUFTTzgG4Dgr8jOpZIPeA2rquIsI"
      },
      "readAuth": {
        "handler": "readAuth.handler",
        "description": "lambda to get Authentication from database!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/auth/read",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v0/auth/read"
          }
        ],
        "name": "IoT-SES-AuthRestApi-dev-readAuth",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ReadAuthLambdaVersionjTS4VILbwrYxS9ZHRyL4PuqBMcpQPTxjjJSpwJB0"
      },
      "readAuthMobile": {
        "handler": "readAuthMobile.handler",
        "description": "lambda to get Authentication from database optimized for mobile application!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v1/auth/read",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v1/auth/read"
          }
        ],
        "name": "IoT-SES-AuthRestApi-dev-readAuthMobile",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ReadAuthMobileLambdaVersionyX1wmqMBaYTMucwlTLuxDDxkG10va9lqRWxw5kvgM"
      },
      "getIdByUserAndPassword": {
        "handler": "getIdByUserAndPss.handler",
        "description": "lambda to get Authentication ID by user & password from database optimized for mobile application!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v1/auth/getIdByUserAndPassword",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v1/auth/getIdByUserAndPassword"
          }
        ],
        "name": "IoT-SES-AuthRestApi-dev-getIdByUserAndPassword",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetIdByUserAndPasswordLambdaVersionK3OVNdVPzeZNXm2YuCf6PnPkFh2kCt6dNq6Dt8U4w"
      },
      "getIdByEmail": {
        "handler": "getIdByEmail.handler",
        "description": "lambda to get Authentication ID by EMAIL for generating QRCODE in mobile application!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v1/auth/getIdByEmail",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v1/auth/getIdByEmail"
          }
        ],
        "name": "IoT-SES-AuthRestApi-dev-getIdByEmail",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetIdByEmailLambdaVersionagpy3L8voEqpITyTAD4ATfEo2FbxFZDi0cHAbUu1L60"
      },
      "updateAuth": {
        "handler": "updateAuth.handler",
        "description": "lambda to update Authentication in database!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/auth/update",
              "method": "PUT"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/api/v0/auth/update"
          }
        ],
        "name": "IoT-SES-AuthRestApi-dev-updateAuth",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateAuthLambdaVersionFpNBreDOAvl7uzE1DI7cR9fpa1OoZFsq506y0bwkXvI"
      },
      "deleteAuth": {
        "handler": "readAuth.handler",
        "description": "lambda to delete Authentication from database!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/auth/delete",
              "method": "DELETE"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/api/v0/auth/delete"
          }
        ],
        "name": "IoT-SES-AuthRestApi-dev-deleteAuth",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteAuthLambdaVersionML8DhJg0xwbYZ3u9SeK1Bw3UI2rqDHr3mFBwu3uuU"
      },
      "heartBeats": {
        "handler": "index.handler",
        "description": "lambda to ensure that everything is ok!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/auth",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v0/auth"
          }
        ],
        "name": "IoT-SES-AuthRestApi-dev-heartBeats",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "HeartBeatsLambdaVersionCXhrpv7lmnpGsgkMkCNGeVQWOmi7qw98fe4DchRt2Y"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "IoT-SES-AuthRestApi",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "D:\\4th_year_materials\\myTeamWorks\\khalid\\IOT_expressjs_restAPI-main\\api\\functions\\auth\\.serverless\\IoT-SES-AuthRestApi.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/IoT-SES-AuthRestApi/dev/1688506339771-2023-07-04T21:32:19.771Z",
    "artifact": "IoT-SES-AuthRestApi.zip"
  }
}