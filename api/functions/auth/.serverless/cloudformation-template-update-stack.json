{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "CraeteAuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-craeteAuth"
      }
    },
    "CreateAuthMobileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-createAuthMobile"
      }
    },
    "ReadAuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-readAuth"
      }
    },
    "ReadAuthMobileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-readAuthMobile"
      }
    },
    "GetIdByUserAndPasswordLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-getIdByUserAndPassword"
      }
    },
    "GetIdByEmailLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-getIdByEmail"
      }
    },
    "UpdateAuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-updateAuth"
      }
    },
    "DeleteAuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-deleteAuth"
      }
    },
    "HeartBeatsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/IoT-SES-AuthRestApi-dev-heartBeats"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "IoT-SES-AuthRestApi",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/IoT-SES-AuthRestApi-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/IoT-SES-AuthRestApi-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "IoT-SES-AuthRestApi",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "CraeteAuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688403288575-2023-07-03T16:54:48.575Z/IoT-SES-AuthRestApi.zip"
        },
        "Handler": "createAuth.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "IoT-SES-AuthRestApi-dev-craeteAuth",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "lambda to create a new Authentication!",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CraeteAuthLogGroup"
      ]
    },
    "CreateAuthMobileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688403288575-2023-07-03T16:54:48.575Z/IoT-SES-AuthRestApi.zip"
        },
        "Handler": "createAuthMobile.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "IoT-SES-AuthRestApi-dev-createAuthMobile",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "lambda to create a new Authentication using mobile application!",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateAuthMobileLogGroup"
      ]
    },
    "ReadAuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688403288575-2023-07-03T16:54:48.575Z/IoT-SES-AuthRestApi.zip"
        },
        "Handler": "readAuth.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "IoT-SES-AuthRestApi-dev-readAuth",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "lambda to get Authentication from database!",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ReadAuthLogGroup"
      ]
    },
    "ReadAuthMobileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688403288575-2023-07-03T16:54:48.575Z/IoT-SES-AuthRestApi.zip"
        },
        "Handler": "readAuthMobile.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "IoT-SES-AuthRestApi-dev-readAuthMobile",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "lambda to get Authentication from database optimized for mobile application!",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ReadAuthMobileLogGroup"
      ]
    },
    "GetIdByUserAndPasswordLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688403288575-2023-07-03T16:54:48.575Z/IoT-SES-AuthRestApi.zip"
        },
        "Handler": "getIdByUserAndPss.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "IoT-SES-AuthRestApi-dev-getIdByUserAndPassword",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "lambda to get Authentication ID by user & password from database optimized for mobile application!",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetIdByUserAndPasswordLogGroup"
      ]
    },
    "GetIdByEmailLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688403288575-2023-07-03T16:54:48.575Z/IoT-SES-AuthRestApi.zip"
        },
        "Handler": "getIdByEmail.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "IoT-SES-AuthRestApi-dev-getIdByEmail",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "lambda to get Authentication ID by EMAIL for generating QRCODE in mobile application!",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetIdByEmailLogGroup"
      ]
    },
    "UpdateAuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688403288575-2023-07-03T16:54:48.575Z/IoT-SES-AuthRestApi.zip"
        },
        "Handler": "updateAuth.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "IoT-SES-AuthRestApi-dev-updateAuth",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "lambda to update Authentication in database!",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateAuthLogGroup"
      ]
    },
    "DeleteAuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688403288575-2023-07-03T16:54:48.575Z/IoT-SES-AuthRestApi.zip"
        },
        "Handler": "readAuth.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "IoT-SES-AuthRestApi-dev-deleteAuth",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "lambda to delete Authentication from database!",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteAuthLogGroup"
      ]
    },
    "HeartBeatsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/IoT-SES-AuthRestApi/dev/1688403288575-2023-07-03T16:54:48.575Z/IoT-SES-AuthRestApi.zip"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "IoT-SES-AuthRestApi-dev-heartBeats",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "lambda to ensure that everything is ok!",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HeartBeatsLogGroup"
      ]
    },
    "CraeteAuthLambdaVersion97q8Yc07WYaEtGP7ASo4z8IhrwCDvBCevL0hmfF8M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CraeteAuthLambdaFunction"
        },
        "CodeSha256": "cqlWfzLO4fV/xNfyZLep10nP8WrKN5heNRKIWDleiF8=",
        "Description": "lambda to create a new Authentication!"
      }
    },
    "CreateAuthMobileLambdaVersionY3YxFYehgSuuO75cVwU06qf2kP29DtFmsHQepVpLg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateAuthMobileLambdaFunction"
        },
        "CodeSha256": "cqlWfzLO4fV/xNfyZLep10nP8WrKN5heNRKIWDleiF8=",
        "Description": "lambda to create a new Authentication using mobile application!"
      }
    },
    "ReadAuthLambdaVersionRBkSX8pkfTAAOyrZMjExSRwLDNljL1pmafTWbo13BUg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ReadAuthLambdaFunction"
        },
        "CodeSha256": "cqlWfzLO4fV/xNfyZLep10nP8WrKN5heNRKIWDleiF8=",
        "Description": "lambda to get Authentication from database!"
      }
    },
    "ReadAuthMobileLambdaVersionJhJ0AEojMET4LTJ8tirtLca81rGVZLRsk3A3lKLmHA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ReadAuthMobileLambdaFunction"
        },
        "CodeSha256": "cqlWfzLO4fV/xNfyZLep10nP8WrKN5heNRKIWDleiF8=",
        "Description": "lambda to get Authentication from database optimized for mobile application!"
      }
    },
    "GetIdByUserAndPasswordLambdaVersionG04ybHChpZFeeBUh83vvbWj8PwiUrA3u4Nwv8GaKSn4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetIdByUserAndPasswordLambdaFunction"
        },
        "CodeSha256": "cqlWfzLO4fV/xNfyZLep10nP8WrKN5heNRKIWDleiF8=",
        "Description": "lambda to get Authentication ID by user & password from database optimized for mobile application!"
      }
    },
    "GetIdByEmailLambdaVersionSy0lW2ts37wu2Cz4RgNah3XB3QB3m6wfAQEYeQ9w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetIdByEmailLambdaFunction"
        },
        "CodeSha256": "cqlWfzLO4fV/xNfyZLep10nP8WrKN5heNRKIWDleiF8=",
        "Description": "lambda to get Authentication ID by EMAIL for generating QRCODE in mobile application!"
      }
    },
    "UpdateAuthLambdaVersionXFsfyXG6YpCVq92DtjjPVjvp8KOLIlWCywz4IKqf0g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateAuthLambdaFunction"
        },
        "CodeSha256": "cqlWfzLO4fV/xNfyZLep10nP8WrKN5heNRKIWDleiF8=",
        "Description": "lambda to update Authentication in database!"
      }
    },
    "DeleteAuthLambdaVersionCEsQzhQzMcQYBw0fL3Wbmw0K1lDZKhe3K4klA8TQo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteAuthLambdaFunction"
        },
        "CodeSha256": "cqlWfzLO4fV/xNfyZLep10nP8WrKN5heNRKIWDleiF8=",
        "Description": "lambda to delete Authentication from database!"
      }
    },
    "HeartBeatsLambdaVersionod83ZOk3Fx3Ev0VkomXIfCYCnz7nWBbkUmpMjRDwyw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HeartBeatsLambdaFunction"
        },
        "CodeSha256": "cqlWfzLO4fV/xNfyZLep10nP8WrKN5heNRKIWDleiF8=",
        "Description": "lambda to ensure that everything is ok!"
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-IoT-SES-AuthRestApi",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "CraeteAuthLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CraeteAuthLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCraeteAuth": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CraeteAuthLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiV0AuthCreate": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/v0/auth/create",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCraeteAuth"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCraeteAuth"
    },
    "CreateAuthMobileLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateAuthMobileLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateAuthMobile": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateAuthMobileLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiV1AuthCreate": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/v1/auth/create",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateAuthMobile"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateAuthMobile"
    },
    "ReadAuthLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReadAuthLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationReadAuth": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ReadAuthLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiV0AuthRead": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/v0/auth/read",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationReadAuth"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationReadAuth"
    },
    "ReadAuthMobileLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReadAuthMobileLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationReadAuthMobile": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ReadAuthMobileLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiV1AuthRead": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/v1/auth/read",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationReadAuthMobile"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationReadAuthMobile"
    },
    "GetIdByUserAndPasswordLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetIdByUserAndPasswordLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetIdByUserAndPassword": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetIdByUserAndPasswordLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiV1AuthGetidbyuserandpassword": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/v1/auth/getIdByUserAndPassword",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetIdByUserAndPassword"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetIdByUserAndPassword"
    },
    "GetIdByEmailLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetIdByEmailLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetIdByEmail": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetIdByEmailLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiV1AuthGetidbyemail": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/v1/auth/getIdByEmail",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetIdByEmail"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetIdByEmail"
    },
    "UpdateAuthLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateAuthLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateAuth": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateAuthLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutApiV0AuthUpdate": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /api/v0/auth/update",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateAuth"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateAuth"
    },
    "DeleteAuthLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteAuthLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteAuth": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteAuthLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteApiV0AuthDelete": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /api/v0/auth/delete",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteAuth"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteAuth"
    },
    "HeartBeatsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HeartBeatsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationHeartBeats": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "HeartBeatsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiV0Auth": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/v0/auth",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationHeartBeats"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationHeartBeats"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-IoT-SES-AuthRestApi-dev-ServerlessDeploymentBucketName"
      }
    },
    "CraeteAuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CraeteAuthLambdaVersion97q8Yc07WYaEtGP7ASo4z8IhrwCDvBCevL0hmfF8M"
      },
      "Export": {
        "Name": "sls-IoT-SES-AuthRestApi-dev-CraeteAuthLambdaFunctionQualifiedArn"
      }
    },
    "CreateAuthMobileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateAuthMobileLambdaVersionY3YxFYehgSuuO75cVwU06qf2kP29DtFmsHQepVpLg"
      },
      "Export": {
        "Name": "sls-IoT-SES-AuthRestApi-dev-CreateAuthMobileLambdaFunctionQualifiedArn"
      }
    },
    "ReadAuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ReadAuthLambdaVersionRBkSX8pkfTAAOyrZMjExSRwLDNljL1pmafTWbo13BUg"
      },
      "Export": {
        "Name": "sls-IoT-SES-AuthRestApi-dev-ReadAuthLambdaFunctionQualifiedArn"
      }
    },
    "ReadAuthMobileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ReadAuthMobileLambdaVersionJhJ0AEojMET4LTJ8tirtLca81rGVZLRsk3A3lKLmHA"
      },
      "Export": {
        "Name": "sls-IoT-SES-AuthRestApi-dev-ReadAuthMobileLambdaFunctionQualifiedArn"
      }
    },
    "GetIdByUserAndPasswordLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetIdByUserAndPasswordLambdaVersionG04ybHChpZFeeBUh83vvbWj8PwiUrA3u4Nwv8GaKSn4"
      },
      "Export": {
        "Name": "sls-IoT-SES-AuthRestApi-dev-GetIdByUserAndPasswordLambdaFunctionQualifiedArn"
      }
    },
    "GetIdByEmailLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetIdByEmailLambdaVersionSy0lW2ts37wu2Cz4RgNah3XB3QB3m6wfAQEYeQ9w"
      },
      "Export": {
        "Name": "sls-IoT-SES-AuthRestApi-dev-GetIdByEmailLambdaFunctionQualifiedArn"
      }
    },
    "UpdateAuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateAuthLambdaVersionXFsfyXG6YpCVq92DtjjPVjvp8KOLIlWCywz4IKqf0g"
      },
      "Export": {
        "Name": "sls-IoT-SES-AuthRestApi-dev-UpdateAuthLambdaFunctionQualifiedArn"
      }
    },
    "DeleteAuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteAuthLambdaVersionCEsQzhQzMcQYBw0fL3Wbmw0K1lDZKhe3K4klA8TQo"
      },
      "Export": {
        "Name": "sls-IoT-SES-AuthRestApi-dev-DeleteAuthLambdaFunctionQualifiedArn"
      }
    },
    "HeartBeatsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HeartBeatsLambdaVersionod83ZOk3Fx3Ev0VkomXIfCYCnz7nWBbkUmpMjRDwyw"
      },
      "Export": {
        "Name": "sls-IoT-SES-AuthRestApi-dev-HeartBeatsLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-IoT-SES-AuthRestApi-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-IoT-SES-AuthRestApi-dev-HttpApiUrl"
      }
    }
  }
}