{
  "service": {
    "service": "IoT-SES-SessionsRestApi",
    "serviceObject": {
      "name": "IoT-SES-SessionsRestApi"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "region": "us-east-1",
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateSessionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-SessionsRestApi-dev-createSession"
            }
          },
          "ReadSessionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-SessionsRestApi-dev-readSession"
            }
          },
          "UpdateSessionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-SessionsRestApi-dev-updateSession"
            }
          },
          "DeleteSessionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-SessionsRestApi-dev-deleteSession"
            }
          },
          "HeartBeatSessionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/IoT-SES-SessionsRestApi-dev-heartBeatSession"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "IoT-SES-SessionsRestApi",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/IoT-SES-SessionsRestApi-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/IoT-SES-SessionsRestApi-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "IoT-SES-SessionsRestApi",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateSessionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-SessionsRestApi/dev/1688326146772-2023-07-02T19:29:06.772Z/IoT-SES-SessionsRestApi.zip"
              },
              "Handler": "createSession.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-SessionsRestApi-dev-createSession",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda function to create a new session in database.",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateSessionLogGroup"
            ]
          },
          "ReadSessionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-SessionsRestApi/dev/1688326146772-2023-07-02T19:29:06.772Z/IoT-SES-SessionsRestApi.zip"
              },
              "Handler": "readSession.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-SessionsRestApi-dev-readSession",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda function to read sessions.",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReadSessionLogGroup"
            ]
          },
          "UpdateSessionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-SessionsRestApi/dev/1688326146772-2023-07-02T19:29:06.772Z/IoT-SES-SessionsRestApi.zip"
              },
              "Handler": "updateSession.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-SessionsRestApi-dev-updateSession",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda fucntion to update existing session details.",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateSessionLogGroup"
            ]
          },
          "DeleteSessionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-SessionsRestApi/dev/1688326146772-2023-07-02T19:29:06.772Z/IoT-SES-SessionsRestApi.zip"
              },
              "Handler": "deleteSession.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-SessionsRestApi-dev-deleteSession",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda function to delete an existing session.",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteSessionLogGroup"
            ]
          },
          "HeartBeatSessionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/IoT-SES-SessionsRestApi/dev/1688326146772-2023-07-02T19:29:06.772Z/IoT-SES-SessionsRestApi.zip"
              },
              "Handler": "index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "IoT-SES-SessionsRestApi-dev-heartBeatSession",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda function for determining that the service is working perfectly.",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HeartBeatSessionLogGroup"
            ]
          },
          "CreateSessionLambdaVersion1rwz4XOtuV4wDmJ5YZ8i3KMVMs618ER3Rs1UqXA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateSessionLambdaFunction"
              },
              "CodeSha256": "CpDoOTFlOXkTulriCpX5yQPPWOkgbW+K+I8SSXjwFk8=",
              "Description": "lambda function to create a new session in database."
            }
          },
          "ReadSessionLambdaVersionOnRl5VraHZEx4HDaSiUHjdZ8aQlLBcaitGdBinI2w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReadSessionLambdaFunction"
              },
              "CodeSha256": "CpDoOTFlOXkTulriCpX5yQPPWOkgbW+K+I8SSXjwFk8=",
              "Description": "lambda function to read sessions."
            }
          },
          "UpdateSessionLambdaVersionoUVRJqtDYtHmqWfYSTBJMSGB6PBhXcCU6RMOZlJNF4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateSessionLambdaFunction"
              },
              "CodeSha256": "CpDoOTFlOXkTulriCpX5yQPPWOkgbW+K+I8SSXjwFk8=",
              "Description": "lambda fucntion to update existing session details."
            }
          },
          "DeleteSessionLambdaVersionZg4VfImDX2XGdKi8P3BpZmwlmNlLvgqtho7dYJcDOcA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteSessionLambdaFunction"
              },
              "CodeSha256": "CpDoOTFlOXkTulriCpX5yQPPWOkgbW+K+I8SSXjwFk8=",
              "Description": "lambda function to delete an existing session."
            }
          },
          "HeartBeatSessionLambdaVersionASsRNhioicpAVZ0dAmlco0eetk4JhZxfnawhQcKLg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HeartBeatSessionLambdaFunction"
              },
              "CodeSha256": "CpDoOTFlOXkTulriCpX5yQPPWOkgbW+K+I8SSXjwFk8=",
              "Description": "lambda function for determining that the service is working perfectly."
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-IoT-SES-SessionsRestApi",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "CreateSessionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateSessionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateSession": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateSessionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiV0SessionsCreate": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/v0/sessions/create",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateSession"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateSession"
          },
          "ReadSessionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReadSessionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationReadSession": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ReadSessionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV0SessionsRead": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v0/sessions/read",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationReadSession"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationReadSession"
          },
          "UpdateSessionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateSessionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateSession": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateSessionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutApiV0SessionsUpdate": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /api/v0/sessions/update",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateSession"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateSession"
          },
          "DeleteSessionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteSessionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteSession": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteSessionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteApiV0SessionsDelete": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /api/v0/sessions/delete",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteSession"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteSession"
          },
          "HeartBeatSessionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HeartBeatSessionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHeartBeatSession": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HeartBeatSessionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV0Sessions": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v0/sessions",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHeartBeatSession"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHeartBeatSession"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-IoT-SES-SessionsRestApi-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateSessionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateSessionLambdaVersion1rwz4XOtuV4wDmJ5YZ8i3KMVMs618ER3Rs1UqXA"
            },
            "Export": {
              "Name": "sls-IoT-SES-SessionsRestApi-dev-CreateSessionLambdaFunctionQualifiedArn"
            }
          },
          "ReadSessionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReadSessionLambdaVersionOnRl5VraHZEx4HDaSiUHjdZ8aQlLBcaitGdBinI2w"
            },
            "Export": {
              "Name": "sls-IoT-SES-SessionsRestApi-dev-ReadSessionLambdaFunctionQualifiedArn"
            }
          },
          "UpdateSessionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateSessionLambdaVersionoUVRJqtDYtHmqWfYSTBJMSGB6PBhXcCU6RMOZlJNF4"
            },
            "Export": {
              "Name": "sls-IoT-SES-SessionsRestApi-dev-UpdateSessionLambdaFunctionQualifiedArn"
            }
          },
          "DeleteSessionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteSessionLambdaVersionZg4VfImDX2XGdKi8P3BpZmwlmNlLvgqtho7dYJcDOcA"
            },
            "Export": {
              "Name": "sls-IoT-SES-SessionsRestApi-dev-DeleteSessionLambdaFunctionQualifiedArn"
            }
          },
          "HeartBeatSessionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HeartBeatSessionLambdaVersionASsRNhioicpAVZ0dAmlco0eetk4JhZxfnawhQcKLg"
            },
            "Export": {
              "Name": "sls-IoT-SES-SessionsRestApi-dev-HeartBeatSessionLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-IoT-SES-SessionsRestApi-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-IoT-SES-SessionsRestApi-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "createSession": {
        "handler": "createSession.handler",
        "description": "lambda function to create a new session in database.",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/sessions/create",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/v0/sessions/create"
          }
        ],
        "name": "IoT-SES-SessionsRestApi-dev-createSession",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateSessionLambdaVersion1rwz4XOtuV4wDmJ5YZ8i3KMVMs618ER3Rs1UqXA"
      },
      "readSession": {
        "handler": "readSession.handler",
        "description": "lambda function to read sessions.",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/sessions/read",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v0/sessions/read"
          }
        ],
        "name": "IoT-SES-SessionsRestApi-dev-readSession",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ReadSessionLambdaVersionOnRl5VraHZEx4HDaSiUHjdZ8aQlLBcaitGdBinI2w"
      },
      "updateSession": {
        "handler": "updateSession.handler",
        "description": "lambda fucntion to update existing session details.",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/sessions/update",
              "method": "PUT"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/api/v0/sessions/update"
          }
        ],
        "name": "IoT-SES-SessionsRestApi-dev-updateSession",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateSessionLambdaVersionoUVRJqtDYtHmqWfYSTBJMSGB6PBhXcCU6RMOZlJNF4"
      },
      "deleteSession": {
        "handler": "deleteSession.handler",
        "description": "lambda function to delete an existing session.",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/sessions/delete",
              "method": "DELETE"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/api/v0/sessions/delete"
          }
        ],
        "name": "IoT-SES-SessionsRestApi-dev-deleteSession",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteSessionLambdaVersionZg4VfImDX2XGdKi8P3BpZmwlmNlLvgqtho7dYJcDOcA"
      },
      "heartBeatSession": {
        "handler": "index.handler",
        "description": "lambda function for determining that the service is working perfectly.",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/sessions",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v0/sessions"
          }
        ],
        "name": "IoT-SES-SessionsRestApi-dev-heartBeatSession",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "HeartBeatSessionLambdaVersionASsRNhioicpAVZ0dAmlco0eetk4JhZxfnawhQcKLg"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "IoT-SES-SessionsRestApi",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "D:\\4th_year_materials\\myTeamWorks\\khalid\\IOT_expressjs_restAPI-main\\api\\functions\\sessions\\.serverless\\IoT-SES-SessionsRestApi.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/IoT-SES-SessionsRestApi/dev/1688326146772-2023-07-02T19:29:06.772Z",
    "artifact": "IoT-SES-SessionsRestApi.zip"
  }
}